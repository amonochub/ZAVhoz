"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è ZAVhoz - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ç—Ä–µ–Ω–¥—ã –ø–æ –∑–∞—è–≤–∫–∞–º.
"""

from datetime import datetime, timedelta

from sqlalchemy import and_, func, select
from sqlalchemy.ext.asyncio import AsyncSession

from models import Priority, Request, Status


class RequestAnalytics:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫"""

    @staticmethod
    async def get_daily_stats(session: AsyncSession, days: int = 7) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ N –¥–Ω–µ–π"""
        start_date = datetime.utcnow() - timedelta(days=days)

        stmt = select(
            func.date(Request.created_at).label('date'),
            func.count(Request.id).label('count')
        ).where(
            Request.created_at >= start_date
        ).group_by(
            func.date(Request.created_at)
        ).order_by('date')

        result = await session.execute(stmt)
        rows = result.all()

        return {
            "period_days": days,
            "daily": [{"date": str(row[0]), "count": row[1]} for row in rows]
        }

    @staticmethod
    async def get_priority_distribution(session: AsyncSession) -> dict:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        stmt = select(
            Request.priority,
            func.count(Request.id).label('count')
        ).group_by(Request.priority)

        result = await session.execute(stmt)
        rows = result.all()

        priority_map = {
            Priority.HIGH: "üî¥ –í—ã—Å–æ–∫–∏–π",
            Priority.MEDIUM: "üü° –°—Ä–µ–¥–Ω–∏–π",
            Priority.LOW: "üü¢ –ù–∏–∑–∫–∏–π"
        }

        return {
            "distribution": [
                {"priority": priority_map.get(row[0], str(row[0])), "count": row[1]}
                for row in rows
            ]
        }

    @staticmethod
    async def get_status_distribution(session: AsyncSession) -> dict:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        stmt = select(
            Request.status,
            func.count(Request.id).label('count')
        ).group_by(Request.status)

        result = await session.execute(stmt)
        rows = result.all()

        status_map = {
            Status.OPEN: "üì≠ –û—Ç–∫—Ä—ã—Ç–∞",
            Status.IN_PROGRESS: "‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ",
            Status.COMPLETED: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞",
            Status.REJECTED: "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        }

        return {
            "distribution": [
                {"status": status_map.get(row[0], str(row[0])), "count": row[1]}
                for row in rows
            ]
        }

    @staticmethod
    async def get_avg_completion_time(session: AsyncSession) -> dict:
        """–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ (–≤ —á–∞—Å–∞—Ö)"""
        stmt = select(
            func.avg(
                func.extract('epoch', Request.completed_at - Request.created_at) / 3600
            )
        ).where(Request.status == Status.COMPLETED)

        result = await session.execute(stmt)
        avg_hours = result.scalar() or 0

        return {
            "avg_hours": round(avg_hours, 2),
            "avg_days": round(avg_hours / 24, 2)
        }

    @staticmethod
    async def get_performance_metrics(session: AsyncSession) -> dict:
        """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        total_stmt = select(func.count(Request.id))
        completed_stmt = select(func.count(Request.id)).where(Request.status == Status.COMPLETED)
        rejected_stmt = select(func.count(Request.id)).where(Request.status == Status.REJECTED)
        in_progress_stmt = select(func.count(Request.id)).where(Request.status == Status.IN_PROGRESS)
        open_stmt = select(func.count(Request.id)).where(Request.status == Status.OPEN)

        total = await session.execute(total_stmt)
        completed = await session.execute(completed_stmt)
        rejected = await session.execute(rejected_stmt)
        in_progress = await session.execute(in_progress_stmt)
        open_req = await session.execute(open_stmt)

        total_count = total.scalar() or 0
        completed_count = completed.scalar() or 0

        completion_rate = (completed_count / total_count * 100) if total_count > 0 else 0

        return {
            "total": total_count,
            "completed": completed_count,
            "rejected": rejected.scalar() or 0,
            "in_progress": in_progress.scalar() or 0,
            "open": open_req.scalar() or 0,
            "completion_rate": round(completion_rate, 2)
        }

    @staticmethod
    async def get_high_priority_pending(session: AsyncSession) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
        two_days_ago = datetime.utcnow() - timedelta(days=2)

        stmt = select(func.count(Request.id)).where(
            and_(
                Request.priority == Priority.HIGH,
                Request.status.in_([Status.OPEN, Status.IN_PROGRESS]),
                Request.created_at <= two_days_ago
            )
        )

        result = await session.execute(stmt)
        return result.scalar() or 0

    @staticmethod
    async def get_full_report(session: AsyncSession) -> dict:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç"""
        metrics = await RequestAnalytics.get_performance_metrics(session)
        daily = await RequestAnalytics.get_daily_stats(session, days=7)
        priority_dist = await RequestAnalytics.get_priority_distribution(session)
        status_dist = await RequestAnalytics.get_status_distribution(session)
        avg_time = await RequestAnalytics.get_avg_completion_time(session)
        overdue = await RequestAnalytics.get_high_priority_pending(session)

        return {
            "timestamp": datetime.utcnow().isoformat(),
            "metrics": metrics,
            "daily_stats": daily,
            "priority_distribution": priority_dist,
            "status_distribution": status_dist,
            "avg_completion_time": avg_time,
            "overdue_high_priority": overdue
        }


def format_analytics_report(report: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –≤ —Ç–µ–∫—Å—Ç"""
    metrics = report["metrics"]
    priority = report["priority_distribution"]["distribution"]
    status = report["status_distribution"]["distribution"]
    avg_time = report["avg_completion_time"]
    overdue = report["overdue_high_priority"]

    text = "üìä <b>–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢</b>\n\n"

    text += "<b>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"  üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {metrics['total']}\n"
    text += f"  ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {metrics['completed']}\n"
    text += f"  ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {metrics['rejected']}\n"
    text += f"  ‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ: {metrics['in_progress']}\n"
    text += f"  üì≠ –û—Ç–∫—Ä—ã—Ç–æ: {metrics['open']}\n"
    text += f"  üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {metrics['completion_rate']}%\n\n"

    text += "<b>üéØ –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:</b>\n"
    for p in priority:
        text += f"  {p['priority']}: {p['count']}\n"
    text += "\n"

    text += "<b>üìä –ü–æ —Å—Ç–∞—Ç—É—Å—É:</b>\n"
    for s in status:
        text += f"  {s['status']}: {s['count']}\n"
    text += "\n"

    text += "<b>‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n"
    text += f"  –°—Ä–µ–¥–Ω–µ–µ: {avg_time['avg_hours']} —á ({avg_time['avg_days']} –¥–Ω)\n\n"

    if overdue > 0:
        text += f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> {overdue} –∑–∞—è–≤–æ–∫ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã!\n"

    return text
