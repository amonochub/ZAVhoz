"""Validation utilities for request data and rate limiting."""

import logging
import re
from typing import Tuple, Optional

from utils.rate_limiter import rate_limiter

logger = logging.getLogger(__name__)


def validate_request_title(title: str) -> Tuple[bool, str]:
    """Validate request title.

    Args:
        title: Request title to validate

    Returns:
        Tuple of (is_valid, error_message)
    """
    if not title or not title.strip():
        return False, "üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ù–µ—Ç —Ç—É–∞–ª–µ—Ç–Ω–æ–π –±—É–º–∞–≥–∏'"

    if len(title.strip()) < 3:
        return False, "üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"

    if len(title.strip()) > 100:
        return False, "üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤"

    return True, ""


def validate_request_description(description: str) -> Tuple[bool, str]:
    """Validate request description.

    Args:
        description: Request description to validate

    Returns:
        Tuple of (is_valid, error_message)
    """
    if not description or not description.strip():
        return False, "üìù –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤"

    if len(description.strip()) < 10:
        return False, "üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤"

    if len(description.strip()) > 1000:
        return False, "üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤"

    return True, ""


def validate_location(location: str) -> Tuple[bool, str]:
    """Validate location.

    Args:
        location: Location to validate

    Returns:
        Tuple of (is_valid, error_message)
    """
    if not location or not location.strip():
        return False, "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ —ç—Ç–∞–∂, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–±–∏–Ω–µ—Ç 101'"

    if len(location.strip()) < 3:
        return False, "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"

    if len(location.strip()) > 100:
        return False, "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤"

    return True, ""


def validate_comment(comment: str) -> Tuple[bool, str]:
    """Validate comment.

    Args:
        comment: Comment to validate

    Returns:
        Tuple of (is_valid, error_message)
    """
    if not comment or not comment.strip():
        return False, "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

    if len(comment.strip()) > 500:
        return False, "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤"

    return True, ""


def sanitize_text(text: str) -> str:
    """Sanitize text by removing dangerous characters and limiting length.

    Args:
        text: Text to sanitize

    Returns:
        Sanitized text
    """
    if not text:
        return ""

    # Remove extra whitespace and line breaks
    text = re.sub(r"\s+", " ", text.strip())

    # Limit length
    if len(text) > 10000:
        text = text[:10000] + "..."

    return text


def validate_file(file_type: str, file_size: Optional[int] = None) -> Tuple[bool, str]:
    """Validate uploaded file type and size.
    
    Args:
        file_type: File type ('photo' or 'document')
        file_size: File size in bytes (optional)
        
    Returns:
        Tuple of (is_valid, error_message)
    """
    allowed_types = ['photo', 'document']
    
    if file_type not in allowed_types:
        return False, f"‚ùå –¢–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(allowed_types)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä (Telegram –æ–±—ã—á–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 20MB)
    if file_size and file_size > 20 * 1024 * 1024:  # 20MB
        return False, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 20 –ú–ë"
    
    return True, ""


def validate_image_caption(caption: Optional[str]) -> Tuple[bool, str]:
    """Validate photo caption (description of problem).
    
    Args:
        caption: Photo caption/description
        
    Returns:
        Tuple of (is_valid, error_message)
    """
    if not caption or not caption.strip():
        return False, "üìù –î–ª—è —Ñ–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
    return validate_request_title(caption)
