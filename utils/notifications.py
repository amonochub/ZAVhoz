"""
–ú–æ–¥—É–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ZAVhoz.
"""

from datetime import datetime, timedelta
from typing import Optional
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from models import Request, Status, Priority
import logging

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, bot: Bot):
        self.bot = bot

    async def notify_admin_new_request(self, request) -> None:
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        try:
            from utils.messages import format_request_info
            admin_id = int(__import__('os').getenv('ADMIN_USER_ID', '0'))
            
            if admin_id == 0:
                logger.warning("ADMIN_USER_ID not configured")
                return
            
            text = f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n{format_request_info(request)}"
            await self.bot.send_message(admin_id, text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error notifying admin: {e}")

    async def notify_user_status_changed(self, request, new_status: str) -> None:
        """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            from utils.messages import format_request_info
            
            status_messages = {
                Status.IN_PROGRESS: "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!",
                Status.COMPLETED: "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
                Status.REJECTED: "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            }
            
            message = status_messages.get(new_status, f"üìù –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_status}")
            text = f"{message}\n\n{format_request_info(request)}"
            
            await self.bot.send_message(request.user.telegram_id, text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error notifying user: {e}")

    async def notify_sla_breach(self, request, sla_hours: int = 24) -> None:
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ SLA"""
        try:
            admin_id = int(__import__('os').getenv('ADMIN_USER_ID', '0'))
            
            if admin_id == 0:
                return
            
            hours_elapsed = (datetime.utcnow() - request.created_at).total_seconds() / 3600
            
            text = f"""‚ö†Ô∏è <b>SLA –ù–ê–†–£–®–ï–ù–ò–ï!</b>

üéØ –ó–∞—è–≤–∫–∞: {request.title}
‚è±Ô∏è –ü—Ä–æ—à–ª–æ {int(hours_elapsed)} —á–∞—Å–æ–≤ (SLA: {sla_hours}—á)
üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {request.priority.value}
üìç –õ–æ–∫–∞—Ü–∏—è: {request.location}
üìä –°—Ç–∞—Ç—É—Å: {request.status.value}

<i>–ó–∞—è–≤–∫–∞ —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!</i>"""
            
            await self.bot.send_message(admin_id, text, parse_mode="HTML")
            logger.warning(f"SLA breach for request {request.id}")
        except Exception as e:
            logger.error(f"Error sending SLA breach notification: {e}")

    async def notify_high_priority_pending(self, session: AsyncSession) -> None:
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö"""
        try:
            admin_id = int(__import__('os').getenv('ADMIN_USER_ID', '0'))
            
            if admin_id == 0:
                return
            
            two_days_ago = datetime.utcnow() - timedelta(days=2)
            
            stmt = select(Request).where(
                and_(
                    Request.priority == Priority.HIGH,
                    Request.status.in_([Status.OPEN, Status.IN_PROGRESS]),
                    Request.created_at <= two_days_ago
                )
            )
            
            result = await session.execute(stmt)
            requests = result.scalars().all()
            
            if requests:
                text = f"""üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–Ø–í–ö–ò –ü–†–û–°–†–û–ß–ï–ù–´!</b>

–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(requests)} –∑–∞—è–≤–æ–∫ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Ä–∞–±–æ—Ç–µ –±–æ–ª–µ–µ 2 –¥–Ω–µ–π:

"""
                for req in requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5
                    hours = (datetime.utcnow() - req.created_at).total_seconds() / 3600
                    text += f"  ‚Ä¢ {req.title} ({int(hours)}—á –Ω–∞–∑–∞–¥)\n"
                
                if len(requests) > 5:
                    text += f"\n... –∏ –µ—â—ë {len(requests) - 5} –∑–∞—è–≤–æ–∫\n"
                
                text += f"\n‚ö° <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è!</b>"
                
                await self.bot.send_message(admin_id, text, parse_mode="HTML")
                logger.warning(f"Found {len(requests)} overdue high-priority requests")
        except Exception as e:
            logger.error(f"Error sending high priority notification: {e}")

    async def send_daily_digest(self, session: AsyncSession) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            from utils.analytics import RequestAnalytics, format_analytics_report
            admin_id = int(__import__('os').getenv('ADMIN_USER_ID', '0'))
            
            if admin_id == 0:
                return
            
            report = await RequestAnalytics.get_full_report(session)
            text = format_analytics_report(report)
            
            await self.bot.send_message(admin_id, text, parse_mode="HTML")
            logger.info("Daily digest sent to admin")
        except Exception as e:
            logger.error(f"Error sending daily digest: {e}")


def get_notification_service(bot: Bot) -> Optional[NotificationService]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        return NotificationService(bot)
    except Exception as e:
        logger.error(f"Error creating notification service: {e}")
        return None