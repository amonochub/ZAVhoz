from datetime import datetime, timedelta
import logging

from aiogram import F, types
from aiogram.types import FSInputFile
from sqlalchemy import and_, func, select

from models import Priority, Request, Status
from utils.auth import require_auth
from utils.keyboard import (
    get_admin_panel_keyboard,
    get_admin_filters_menu_keyboard,
    get_admin_export_menu_keyboard,
    get_back_keyboard,
)
from utils.messages import format_request_list, STATUS_EMOJIS, PRIORITY_EMOJIS

logger = logging.getLogger(__name__)


@require_auth
async def admin_panel_callback(callback: types.CallbackQuery, user, session):
    """–ü–∞–Ω–µ–ª—å –∑–∞–≤—Ö–æ–∑–∞ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    logger.info(f"üîç Admin panel access attempt: user_id={user.id}, telegram_id={user.telegram_id}, role={user.role}, is_active={user.is_active}")
    
    if user.role != "admin":
        logger.warning(f"‚ùå Access denied: user {user.telegram_id} tried to access admin panel but has role '{user.role}'")
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    logger.info(f"‚úÖ Admin panel opened for user {user.telegram_id}")
    keyboard = get_admin_panel_keyboard()
    await callback.message.edit_text(
        "üëë <b>–ü–ê–ù–ï–õ–¨ –ó–ê–í–•–û–ó–ê</b>\n\nüîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@require_auth
async def admin_open_requests_callback(callback: types.CallbackQuery, user, session):
    """–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ - —Å —É–º–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    stmt = select(Request).where(
        Request.status.in_([Status.OPEN, Status.IN_PROGRESS])
    ).order_by(Request.priority.desc(), Request.created_at.asc())
    
    result = await session.execute(stmt)
    requests = result.scalars().all()

    if not requests:
        text = "‚úÖ <b>–í—Å–µ –∑–∞—è–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</b>\n\nüì≠ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç."
        keyboard = get_admin_panel_keyboard()
    else:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        high_priority = [r for r in requests if r.priority == Priority.HIGH]
        medium_priority = [r for r in requests if r.priority == Priority.MEDIUM]
        low_priority = [r for r in requests if r.priority == Priority.LOW]
        
        text = f"üìã <b>–û–¢–ö–†–´–¢–´–ï –ó–ê–Ø–í–ö–ò ({len(requests)})</b>\n\n"
        
        if high_priority:
            text += f"üî¥ <b>–°–†–û–ß–ù–´–ï ({len(high_priority)}):</b>\n"
            for req in high_priority[:3]:
                text += f"  #{req.id} {STATUS_EMOJIS.get(req.status, '?')} {req.title[:28]}...\n"
            if len(high_priority) > 3:
                text += f"  ... –∏ –µ—â—ë {len(high_priority) - 3}\n"
            text += "\n"
        
        if medium_priority:
            text += f"üü° <b>–°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ ({len(medium_priority)}):</b>\n"
            for req in medium_priority[:2]:
                text += f"  #{req.id} - {req.title[:28]}...\n"
            text += "\n"
        
        if low_priority:
            text += f"üü¢ <b>–ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ ({len(low_priority)})</b>\n"
        
        keyboard = get_admin_filters_menu_keyboard()

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def admin_filters_menu_callback(callback: types.CallbackQuery, user, session):
    """–ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    keyboard = get_admin_filters_menu_keyboard()
    await callback.message.edit_text(
        "üéØ <b>–§–ò–õ–¨–¢–†–´</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@require_auth
async def filter_priority_callback(callback: types.CallbackQuery, user, session):
    """–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    priority_str = callback.data.replace("filter_priority_", "")
    priority = Priority(priority_str)

    stmt = select(Request).where(
        and_(Request.priority == priority, Request.status.in_([Status.OPEN, Status.IN_PROGRESS]))
    ).order_by(Request.created_at.asc())
    
    result = await session.execute(stmt)
    requests = result.scalars().all()

    text = format_request_list(requests, f"–ó–∞—è–≤–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º '{priority.value}'")
    keyboard = get_back_keyboard("admin_filters_menu")

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def filter_status_callback(callback: types.CallbackQuery, user, session):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    status_str = callback.data.replace("filter_status_", "")
    status = Status(status_str)

    stmt = select(Request).where(Request.status == status).order_by(Request.created_at.desc())
    result = await session.execute(stmt)
    requests = result.scalars().all()

    text = format_request_list(requests, f"–ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status.value}'")
    keyboard = get_back_keyboard("admin_filters_menu")

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def filter_today_callback(callback: types.CallbackQuery, user, session):
    """–ó–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    today = datetime.utcnow().date()
    stmt = select(Request).where(
        func.date(Request.created_at) == today
    ).order_by(Request.created_at.desc())
    
    result = await session.execute(stmt)
    requests = result.scalars().all()

    text = format_request_list(requests, f"–ó–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({len(requests)})")
    keyboard = get_back_keyboard("admin_filters_menu")

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def filter_week_callback(callback: types.CallbackQuery, user, session):
    """–ó–∞—è–≤–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    week_ago = datetime.utcnow() - timedelta(days=7)
    stmt = select(Request).where(
        Request.created_at >= week_ago
    ).order_by(Request.created_at.desc())
    
    result = await session.execute(stmt)
    requests = result.scalars().all()

    text = format_request_list(requests, f"–ó–∞—è–≤–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é ({len(requests)})")
    keyboard = get_back_keyboard("admin_filters_menu")

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def admin_stats_callback(callback: types.CallbackQuery, user, session):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –¥–ª—è –∑–∞–≤—Ö–æ–∑–∞"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    open_count = await session.scalar(
        select(func.count(Request.id)).where(Request.status == Status.OPEN)
    ) or 0
    
    in_progress_count = await session.scalar(
        select(func.count(Request.id)).where(Request.status == Status.IN_PROGRESS)
    ) or 0
    
    completed_today = await session.scalar(
        select(func.count(Request.id)).where(
            and_(
                Request.status == Status.COMPLETED,
                func.date(Request.completed_at) == func.date(datetime.utcnow())
            )
        )
    ) or 0
    
    total = await session.scalar(select(func.count(Request.id))) or 0
    completed = await session.scalar(
        select(func.count(Request.id)).where(Request.status == Status.COMPLETED)
    ) or 0

    text = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´</b>\n\n"
    text += "üìã <b>–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:</b>\n"
    text += f"  üì≠ –û–∂–∏–¥–∞—é—Ç: <b>{open_count}</b>\n"
    text += f"  ‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ: <b>{in_progress_count}</b>\n"
    text += f"  ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: <b>{completed_today}</b>\n\n"
    
    text += "üìà <b>–í—Å–µ–≥–æ:</b>\n"
    text += f"  –ó–∞—è–≤–æ–∫: {total} | –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}\n\n"
    
    # –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    total_active = open_count + in_progress_count
    if total_active > 15:
        text += "‚ö†Ô∏è <b>–ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã!</b> –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.\n"
    elif total_active > 10:
        text += "üí™ <b>–•–æ—Ä–æ—à–∏–π —Ç–µ–º–ø!</b> –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–∞–∫ –∂–µ.\n"
    elif total_active > 0:
        text += "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –†–∞–±–æ—Ç–∞ –∏–¥–µ—Ç —Ö–æ—Ä–æ—à–æ.\n"
    else:
        text += "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!\n"

    keyboard = get_back_keyboard("back_to_admin")
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def admin_archive_callback(callback: types.CallbackQuery, user, session):
    """–ê—Ä—Ö–∏–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    stmt = select(Request).where(
        Request.status == Status.COMPLETED
    ).order_by(Request.completed_at.desc()).limit(50)
    
    result = await session.execute(stmt)
    requests = result.scalars().all()

    text = format_request_list(requests, "–ê—Ä—Ö–∏–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞—è–≤–æ–∫)")
    keyboard = get_back_keyboard("back_to_admin")

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def admin_export_menu_callback(callback: types.CallbackQuery, user, session):
    """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    keyboard = get_admin_export_menu_keyboard()
    await callback.message.edit_text(
        "üì§ <b>–≠–ö–°–ü–û–†–¢</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@require_auth
async def export_month_callback(callback: types.CallbackQuery, user, session):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –∑–∞ –º–µ—Å—è—Ü"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        month_ago = datetime.utcnow() - timedelta(days=30)
        
        stmt = select(Request).where(
            Request.created_at >= month_ago
        ).order_by(Request.created_at.desc())
        
        result = await session.execute(stmt)
        requests = result.scalars().all()

        if not requests:
            await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
            return

        # –°–æ–∑–¥–∞–µ–º CSV –æ—Ç—á–µ—Ç
        report_lines = [
            "–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
            f"–ü–µ—Ä–∏–æ–¥: {month_ago.strftime('%d.%m.%Y')} - {datetime.utcnow().strftime('%d.%m.%Y')}",
            f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(requests)}",
            "",
            "ID;–î–∞—Ç–∞;–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç;–°—Ç–∞—Ç—É—Å;–ó–∞–≥–æ–ª–æ–≤–æ–∫;–õ–æ–∫–∞—Ü–∏—è"
        ]
        
        for req in requests:
            line = f"{req.id};{req.created_at.strftime('%d.%m.%Y %H:%M')};{req.priority.value};{req.status.value};{req.title};{req.location}"
            report_lines.append(line)
        
        filename = f"monthly_report_{datetime.now().strftime('%Y%m%d')}.csv"
        with open(filename, 'w', encoding='utf-8-sig') as f:
            f.write("\n".join(report_lines))

        document = FSInputFile(filename)
        await callback.message.reply_document(
            document=document,
            caption="üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –∑–∞ –º–µ—Å—è—Ü"
        )
        
        import os
        os.remove(filename)
        
    except Exception as e:
        logger.error(f"Export error: {e}", exc_info=True)
        await callback.answer(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", show_alert=True)


@require_auth
async def export_stats_callback(callback: types.CallbackQuery, user, session):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_lines = [
            "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´",
            f"–û—Ç—á–µ—Ç –æ—Ç: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            ""
        ]
        
        total = await session.scalar(select(func.count(Request.id))) or 0
        completed = await session.scalar(select(func.count(Request.id)).where(Request.status == Status.COMPLETED)) or 0
        rejected = await session.scalar(select(func.count(Request.id)).where(Request.status == Status.REJECTED)) or 0
        
        stats_lines.extend([
            "–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:",
            f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}",
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}",
            f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected}",
            ""
        ])
        
        # –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        stats_lines.append("–ü–û –ü–†–ò–û–†–ò–¢–ï–¢–ê–ú:")
        for priority in [Priority.HIGH, Priority.MEDIUM, Priority.LOW]:
            count = await session.scalar(
                select(func.count(Request.id)).where(Request.priority == priority)
            ) or 0
            stats_lines.append(f"{priority.value}: {count}")
        
        stats_lines.append("")
        
        # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
        stats_lines.append("–ü–û –°–¢–ê–¢–£–°–ê–ú:")
        for status in [Status.OPEN, Status.IN_PROGRESS, Status.COMPLETED, Status.REJECTED]:
            count = await session.scalar(
                select(func.count(Request.id)).where(Request.status == status)
            ) or 0
            stats_lines.append(f"{status.value}: {count}")
        
        filename = f"stats_report_{datetime.now().strftime('%Y%m%d_%H%M')}.txt"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("\n".join(stats_lines))

        document = FSInputFile(filename)
        await callback.message.reply_document(
            document=document,
            caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"
        )
        
        import os
        os.remove(filename)
        
    except Exception as e:
        logger.error(f"Stats export error: {e}", exc_info=True)
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@require_auth
async def export_all_callback(callback: types.CallbackQuery, user, session):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ CSV"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        stmt = select(Request).order_by(Request.created_at.desc())
        result = await session.execute(stmt)
        requests = result.scalars().all()

        if not requests:
            await callback.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        # CSV
        report_lines = [
            "ID;–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è;–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è;–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç;–°—Ç–∞—Ç—É—Å;–ó–∞–≥–æ–ª–æ–≤–æ–∫;–û–ø–∏—Å–∞–Ω–∏–µ;–õ–æ–∫–∞—Ü–∏—è;–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        ]
        
        for req in requests:
            line = f'{req.id};{req.created_at.strftime("%d.%m.%Y %H:%M")};{req.completed_at.strftime("%d.%m.%Y %H:%M") if req.completed_at else ""};{req.priority.value};{req.status.value};"{req.title}";"{req.description}";{req.location};{req.user.username or ""}'
            report_lines.append(line)
        
        filename = f"all_requests_{datetime.now().strftime('%Y%m%d')}.csv"
        with open(filename, 'w', encoding='utf-8-sig') as f:
            f.write("\n".join(report_lines))

        document = FSInputFile(filename)
        await callback.message.reply_document(
            document=document,
            caption=f"üìã –í—Å–µ –∑–∞—è–≤–∫–∏ ({len(requests)})"
        )
        
        import os
        os.remove(filename)
        
    except Exception as e:
        logger.error(f"All export error: {e}", exc_info=True)
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@require_auth
async def back_to_admin_callback(callback: types.CallbackQuery, user, session):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await admin_panel_callback(callback, user=user, session=session)


def register_admin_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∞"""
    dp.callback_query.register(admin_panel_callback, F.data == "admin_panel")
    dp.callback_query.register(admin_panel_callback, F.data == "back_to_admin")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    dp.callback_query.register(admin_open_requests_callback, F.data == "admin_open_requests")
    dp.callback_query.register(admin_stats_callback, F.data == "admin_stats")
    dp.callback_query.register(admin_archive_callback, F.data == "admin_archive")
    
    # –§–∏–ª—å—Ç—Ä—ã
    dp.callback_query.register(admin_filters_menu_callback, F.data == "admin_filters_menu")
    dp.callback_query.register(filter_priority_callback, F.data.startswith("filter_priority_"))
    dp.callback_query.register(filter_status_callback, F.data.startswith("filter_status_"))
    dp.callback_query.register(filter_today_callback, F.data == "filter_today")
    dp.callback_query.register(filter_week_callback, F.data == "filter_week")
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    dp.callback_query.register(admin_export_menu_callback, F.data == "admin_export_menu")
    dp.callback_query.register(export_month_callback, F.data == "export_month")
    dp.callback_query.register(export_stats_callback, F.data == "export_stats")
    dp.callback_query.register(export_all_callback, F.data == "export_all")
