from aiogram import types, F
from sqlalchemy import select, func, and_
from database.connection import get_db
from models import Request, Status, Priority
from utils.auth import require_auth
from utils.keyboard import (
    get_admin_panel_keyboard, get_filter_keyboard, get_request_actions_keyboard, 
    get_back_keyboard, get_priority_filter_keyboard, get_status_filter_keyboard,
    get_search_filter_keyboard
)
from utils.messages import format_request_list, format_request_info, get_stats_message
from utils.export import export_requests_to_csv, get_requests_for_export
from aiogram.types import FSInputFile
from datetime import datetime, timedelta

@require_auth
async def admin_panel_callback(callback: types.CallbackQuery, user, session):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    keyboard = get_admin_panel_keyboard()
    await callback.message.edit_text(
        "üëë <b>–ü–∞–Ω–µ–ª—å –∑–∞–≤—Ö–æ–∑–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@require_auth
async def admin_open_requests_callback(callback: types.CallbackQuery, user, session):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    stmt = select(Request).where(Request.status.in_([Status.OPEN, Status.IN_PROGRESS])).order_by(Request.priority.desc(), Request.created_at.asc())
    result = await session.execute(stmt)
    requests = result.scalars().all()

    if not requests:
        text = "üì≠ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç."
        keyboard = get_admin_panel_keyboard()
    else:
        text = format_request_list(requests, "–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏")
        keyboard = get_filter_keyboard()

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@require_auth
async def admin_stats_callback(callback: types.CallbackQuery, user, session):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
    stmt_total = select(func.count(Request.id))
    result_total = await session.execute(stmt_total)
    total_requests = result_total.scalar()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    stmt_completed = select(func.count(Request.id)).where(Request.status == Status.COMPLETED)
    result_completed = await session.execute(stmt_completed)
    completed_requests = result_completed.scalar()

    # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —á–∞—Å–∞—Ö)
    stmt_avg_time = select(
        func.avg(
            func.extract('epoch', Request.completed_at) - func.extract('epoch', Request.created_at)
        ) / 3600
    ).where(Request.status == Status.COMPLETED)
    result_avg_time = await session.execute(stmt_avg_time)
    avg_completion_time = result_avg_time.scalar()

    text = get_stats_message(total_requests, completed_requests, avg_completion_time)
    keyboard = get_back_keyboard("back_to_admin")

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@require_auth
async def admin_archive_callback(callback: types.CallbackQuery, user, session):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    stmt = select(Request).where(Request.status == Status.COMPLETED).order_by(Request.completed_at.desc()).limit(50)
    result = await session.execute(stmt)
    requests = result.scalars().all()

    if not requests:
        text = "üì≠ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç."
    else:
        text = format_request_list(requests, "–ê—Ä—Ö–∏–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")

    keyboard = get_back_keyboard("back_to_admin")
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@require_auth
async def back_to_admin_callback(callback: types.CallbackQuery, user, session):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await admin_panel_callback(callback, user, session)

@require_auth
async def export_csv_callback(callback: types.CallbackQuery, user, session):
    """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ –≤ CSV"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    date_from = datetime.utcnow() - timedelta(days=30)
    requests = await get_requests_for_export(Status.COMPLETED, date_from)

    if not requests:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return

    # –°–æ–∑–¥–∞–µ–º CSV
    csv_content = await export_requests_to_csv(requests)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    filename = f"requests_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    with open(filename, 'w', encoding='utf-8-sig') as f:
        f.write(csv_content)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    document = FSInputFile(filename)
    await callback.message.reply_document(
        document=document,
        caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
    )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    import os
    os.remove(filename)

    await callback.answer()

@require_auth
async def filter_priority_callback(callback: types.CallbackQuery, user, session):
    """–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    priority = callback.data.split("_")[-1]
    
    if priority == "ALL":
        stmt = select(Request).where(Request.status.in_([Status.OPEN, Status.IN_PROGRESS])).order_by(Request.priority.desc(), Request.created_at.asc())
    else:
        stmt = select(Request).where(
            and_(
                Request.status.in_([Status.OPEN, Status.IN_PROGRESS]),
                Request.priority == Priority[priority]
            )
        ).order_by(Request.created_at.asc())
    
    result = await session.execute(stmt)
    requests = result.scalars().all()
    
    priority_text = {
        "HIGH": "üî¥ –í–´–°–û–ö–ò–ô",
        "MEDIUM": "üü° –°–†–ï–î–ù–ò–ô", 
        "LOW": "üü¢ –ù–ò–ó–ö–ò–ô",
        "ALL": "üìã –í–°–ï"
    }
    
    if not requests:
        text = f"üì≠ –ó–∞—è–≤–æ–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority_text.get(priority, priority)} –Ω–µ—Ç."
        keyboard = get_back_keyboard("back_to_admin")
    else:
        text = format_request_list(requests, f"–ó–∞—è–≤–∫–∏: {priority_text.get(priority, priority)} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        keyboard = get_back_keyboard("back_to_admin")
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@require_auth
async def filter_status_callback(callback: types.CallbackQuery, user, session):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    status_name = callback.data.split("_")[-1]
    
    if status_name == "ALL":
        stmt = select(Request).order_by(Request.created_at.desc())
    else:
        stmt = select(Request).where(Request.status == Status[status_name]).order_by(Request.created_at.desc())
    
    result = await session.execute(stmt)
    requests = result.scalars().all()
    
    status_text = {
        "OPEN": "üì≠ –û–¢–ö–†–´–¢–´–ï",
        "IN_PROGRESS": "‚öôÔ∏è –í –†–ê–ë–û–¢–ï",
        "COMPLETED": "‚úÖ –í–´–ü–û–õ–ù–ï–ù–û",
        "REJECTED": "‚ùå –û–¢–ö–õ–û–ù–ï–ù–û",
        "ALL": "üìã –í–°–ï"
    }
    
    if not requests:
        text = f"üì≠ –ó–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status_text.get(status_name, status_name)} –Ω–µ—Ç."
        keyboard = get_back_keyboard("back_to_admin")
    else:
        text = format_request_list(requests, f"–ó–∞—è–≤–∫–∏: {status_text.get(status_name, status_name)}")
        keyboard = get_back_keyboard("back_to_admin")
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@require_auth
async def show_advanced_search_callback(callback: types.CallbackQuery, user, session):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    keyboard = get_search_filter_keyboard()
    await callback.message.edit_text(
        "üîç <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@require_auth
async def search_by_date_callback(callback: types.CallbackQuery, user, session):
    """–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    seven_days_ago = datetime.now() - timedelta(days=7)
    
    stmt = select(Request).where(Request.created_at >= seven_days_ago).order_by(Request.created_at.desc())
    result = await session.execute(stmt)
    requests = result.scalars().all()
    
    if not requests:
        text = "üì≠ –ó–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ—Ç."
        keyboard = get_back_keyboard("back_to_admin")
    else:
        text = format_request_list(requests, f"–ó–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π ({len(requests)} —à—Ç.)")
        keyboard = get_back_keyboard("back_to_admin")
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@require_auth
async def admin_advanced_analytics_callback(callback: types.CallbackQuery, user, session):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        from utils.analytics import RequestAnalytics, format_analytics_report
        
        report = await RequestAnalytics.get_full_report(session)
        text = format_analytics_report(report)
        
        keyboard = get_back_keyboard("back_to_admin")
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}", show_alert=True)
    
    await callback.answer()

@require_auth
async def admin_priority_filter_callback(callback: types.CallbackQuery, user, session):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    from utils.keyboard import get_priority_filter_keyboard
    keyboard = get_priority_filter_keyboard()
    await callback.message.edit_text(
        "üéØ <b>–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@require_auth
async def admin_status_filter_callback(callback: types.CallbackQuery, user, session):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    from utils.keyboard import get_status_filter_keyboard
    keyboard = get_status_filter_keyboard()
    await callback.message.edit_text(
        "üìä <b>–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

def register_admin_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    dp.callback_query.register(admin_panel_callback, F.data == "admin_panel")
    dp.callback_query.register(admin_open_requests_callback, F.data == "admin_open_requests")
    dp.callback_query.register(admin_stats_callback, F.data == "admin_stats")
    dp.callback_query.register(admin_archive_callback, F.data == "admin_archive")
    dp.callback_query.register(export_csv_callback, F.data == "export_csv")
    dp.callback_query.register(back_to_admin_callback, F.data == "back_to_admin")
    dp.callback_query.register(admin_advanced_analytics_callback, F.data == "admin_advanced_analytics")
    dp.callback_query.register(admin_priority_filter_callback, F.data == "admin_priority_filter")
    dp.callback_query.register(admin_status_filter_callback, F.data == "admin_status_filter")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    register_admin_filters_handlers(dp)

def register_admin_filters_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    dp.callback_query.register(filter_priority_callback, F.data.startswith("filter_priority_"))
    dp.callback_query.register(filter_status_callback, F.data.startswith("filter_status_"))
    dp.callback_query.register(show_advanced_search_callback, F.data == "search_menu")
    dp.callback_query.register(search_by_date_callback, F.data == "search_date")