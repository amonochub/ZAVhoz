from aiogram import types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from database.connection import get_db
from models import Request, File, Priority
from utils.auth import require_auth
from utils.keyboard import get_priority_keyboard, get_main_menu_keyboard, get_back_keyboard
from utils.messages import format_request_info
from utils.validation import validate_request_title, validate_request_description, validate_location, rate_limiter
from .menu import CreateRequestStates

@require_auth
async def title_received(message: types.Message, state: FSMContext, user, session):
    """–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not rate_limiter.is_allowed(message.from_user.id, "create_request", max_requests=3, time_window=300):
        await message.reply("‚è±Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_request_title(message.text)
    if not is_valid:
        await message.reply(f"‚ùå {error_msg}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return

    await state.update_data(title=message.text.strip())
    await state.set_state(CreateRequestStates.waiting_for_description)
    await message.reply(
        "üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=get_back_keyboard("cancel_create")
    )

@require_auth
async def description_received(message: types.Message, state: FSMContext, user, session):
    """–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_request_description(message.text)
    if not is_valid:
        await message.reply(f"‚ùå {error_msg}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return

    await state.update_data(description=message.text.strip())
    await state.set_state(CreateRequestStates.waiting_for_location)
    await message.reply(
        "üè¢ –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∫–∞–±–∏–Ω–µ—Ç, —ç—Ç–∞–∂, –∑–¥–∞–Ω–∏–µ):",
        reply_markup=get_back_keyboard("cancel_create")
    )

@require_auth
async def location_received(message: types.Message, state: FSMContext, user, session):
    """–ü–æ–ª—É—á–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_location(message.text)
    if not is_valid:
        await message.reply(f"‚ùå {error_msg}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return

    await state.update_data(location=message.text.strip())
    await state.set_state(CreateRequestStates.waiting_for_priority)
    keyboard = get_priority_keyboard()
    await message.reply(
        "üî¥ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—è–≤–∫–∏:",
        reply_markup=keyboard
    )

@require_auth
async def priority_selected(callback: types.CallbackQuery, state: FSMContext, user, session):
    """–í—ã–±—Ä–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"""
    priority_value = callback.data.replace("priority_", "")
    priority = Priority(priority_value)
    await state.update_data(priority=priority)

    data = await state.get_data()
    text = f"""
üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>

üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}
üè¢ <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {data['location']}
üî¥ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority.value}

–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å". –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å - –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞".
"""

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="confirm_create")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@require_auth
async def confirm_create_callback(callback: types.CallbackQuery, state: FSMContext, user, session):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    data = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    request = Request(
        user_id=user.id,
        title=data['title'],
        description=data['description'],
        location=data['location'],
        priority=data['priority']
    )
    session.add(request)
    await session.commit()
    await session.refresh(request)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    from utils.notifications import get_notification_service
    from bot.main import bot
    notification_service = get_notification_service(bot)
    if notification_service:
        await notification_service.notify_admin_new_request(request)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    text = f"‚úÖ <b>–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n{format_request_info(request)}"
    keyboard = get_main_menu_keyboard(user.role == "admin")

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@require_auth
async def cancel_create_callback(callback: types.CallbackQuery, state: FSMContext, user, session):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await state.clear()
    keyboard = get_main_menu_keyboard(user.role == "admin")
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\nüè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

def register_create_request_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    dp.message.register(title_received, CreateRequestStates.waiting_for_title)
    dp.message.register(description_received, CreateRequestStates.waiting_for_description)
    dp.message.register(location_received, CreateRequestStates.waiting_for_location)
    dp.callback_query.register(priority_selected, F.data.startswith("priority_"))
    dp.callback_query.register(confirm_create_callback, F.data == "confirm_create")
    dp.callback_query.register(cancel_create_callback, F.data == "cancel_create")