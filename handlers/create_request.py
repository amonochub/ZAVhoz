from aiogram import types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from database.connection import get_db
from models import Request, File, Priority
from utils.auth import require_auth
from utils.keyboard import get_priority_keyboard, get_main_menu_keyboard, get_back_keyboard
from utils.messages import format_request_info
from utils.validation import validate_location, rate_limiter
from .menu import CreateRequestStates

def get_yes_no_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç"""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="additional_yes"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –≥–æ—Ç–æ–≤–æ", callback_data="additional_no")
        ],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_create")]
    ])

@require_auth
async def description_received(message: types.Message, state: FSMContext, user, session):
    """–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç)"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not rate_limiter.is_allowed(message.from_user.id, "create_request", max_requests=5, time_window=300):
        await message.reply("‚è±Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    description = ""
    file_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    if message.photo:
        file_id = message.photo[-1].file_id
        description = message.caption or "üì∏ –§–æ—Ç–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
    elif message.text:
        description = message.text.strip()
    else:
        await message.reply("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
        return

    if not description or len(description.strip()) < 3:
        await message.reply("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return

    if len(description) > 1000:
        await message.reply("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(description=description, file_id=file_id)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
    await state.set_state(CreateRequestStates.waiting_for_additional)
    await message.reply(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.\n\n"
        "üí¨ –•–æ—Ç–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—è–º–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –ª–æ–∫–∞—Ü–∏—è, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)?",
        reply_markup=get_yes_no_keyboard()
    )

@require_auth
async def additional_yes_callback(callback: types.CallbackQuery, state: FSMContext, user, session):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç—å"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìç –£–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="add_location")],
        [types.InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="add_comment")],
        [types.InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ, –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data="go_priority")]
    ])
    
    await callback.message.edit_text(
        "üìù –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å?",
        reply_markup=keyboard
    )
    await callback.answer()

@require_auth
async def additional_no_callback(callback: types.CallbackQuery, state: FSMContext, user, session):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –¥–æ–ø–æ–ª–Ω—è—Ç—å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
    await state.set_state(CreateRequestStates.waiting_for_priority)
    keyboard = get_priority_keyboard()
    await callback.message.edit_text(
        "üî¥ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—è–≤–∫–∏:</b>\n\n"
        "üî¥ –í—ã—Å–æ–∫–∏–π - —Å—Ä–æ—á–Ω–æ\n"
        "üü° –°—Ä–µ–¥–Ω–∏–π - –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è\n"
        "üü¢ –ù–∏–∑–∫–∏–π - –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤—Ä–µ–º—è",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@require_auth
async def priority_selected(callback: types.CallbackQuery, state: FSMContext, user, session):
    """–í—ã–±—Ä–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É"""
    priority_value = callback.data.replace("priority_", "")
    priority = Priority(priority_value)

    data = await state.get_data()
    
    # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
    request = Request(
        user_id=user.id,
        title=data['description'][:100],  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
        description=data['description'],
        location="–ù–µ —É–∫–∞–∑–∞–Ω–æ",  # –õ–æ–∫–∞—Ü–∏—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞
        priority=priority
    )
    session.add(request)
    await session.commit()
    await session.refresh(request)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ - –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª
    if data.get('file_id'):
        file = File(
            request_id=request.id,
            file_id=data['file_id'],
            file_type="photo",
            uploaded_by=user.id
        )
        session.add(file)
        await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    from utils.notifications import get_notification_service
    from bot.main import bot
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info(f"Request created: ID={request.id}, user_id={user.id}")
    notification_service = get_notification_service(bot)
    if notification_service:
        logger.info(f"Sending notification to admin about request {request.id}")
        await notification_service.notify_admin_new_request(request)
        logger.info(f"Notification sent successfully")
    else:
        logger.error("Notification service not available")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    text = f"‚úÖ <b>–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n{format_request_info(request)}"
    keyboard = get_main_menu_keyboard(user.role == "admin")

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@require_auth
async def cancel_create_callback(callback: types.CallbackQuery, state: FSMContext, user, session):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await state.clear()
    keyboard = get_main_menu_keyboard(user.role == "admin")
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\nüè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

def register_create_request_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    dp.message.register(description_received, CreateRequestStates.waiting_for_description)
    dp.callback_query.register(additional_yes_callback, F.data == "additional_yes")
    dp.callback_query.register(additional_no_callback, F.data == "additional_no")
    dp.callback_query.register(priority_selected, F.data.startswith("priority_"))
    dp.callback_query.register(cancel_create_callback, F.data == "cancel_create")