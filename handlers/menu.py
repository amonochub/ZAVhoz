from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select

from models import Request
from utils.auth import require_auth
from utils.keyboard import (
    get_back_keyboard,
    get_main_menu_keyboard,
)
from utils.messages import format_request_list


class CreateRequestStates(StatesGroup):
    waiting_for_description = State()  # –§–æ—Ç–æ/—Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
    waiting_for_additional = State()   # –•–æ—Ç–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å?
    waiting_for_priority = State()     # –í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞

@require_auth
async def main_menu_callback(callback: types.CallbackQuery, user, session):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    is_admin = user.role == "admin"
    keyboard = get_main_menu_keyboard(is_admin)
    await callback.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@require_auth
async def create_request_callback(callback: types.CallbackQuery, state: FSMContext, user, session):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - –Ω–∞—á–∞–ª–æ"""
    await state.set_state(CreateRequestStates.waiting_for_description)
    await callback.message.edit_text(
        "üì∏ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n"
        "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–¢—Ä–µ—â–∏–Ω–∞ –≤ –æ–∫–Ω–µ, –∫–∞–±–∏–Ω–µ—Ç 101'",
        reply_markup=get_back_keyboard("back_to_main"),
        parse_mode="HTML"
    )
    await callback.answer()

@require_auth
async def my_requests_callback(callback: types.CallbackQuery, user, session):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stmt = select(Request).where(Request.user_id == user.id).order_by(Request.created_at.desc())
    result = await session.execute(stmt)
    requests = result.scalars().all()

    if not requests:
        text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É!"
        keyboard = get_main_menu_keyboard(user.role == "admin")
    else:
        text = format_request_list(requests, "–í–∞—à–∏ –∑–∞—è–≤–∫–∏")
        keyboard = get_back_keyboard("back_to_main")

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

async def back_to_main_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await main_menu_callback(callback)

def register_menu_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é"""
    dp.callback_query.register(main_menu_callback, F.data == "back_to_main")
    dp.callback_query.register(create_request_callback, F.data == "create_request")
    dp.callback_query.register(my_requests_callback, F.data == "my_requests")
    dp.callback_query.register(back_to_main_callback, F.data == "back")
