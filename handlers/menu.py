from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select

from models import Request
from utils.auth import require_auth
from utils.keyboard import (
    get_back_keyboard,
    get_main_menu_keyboard,
    get_user_help_keyboard,
    get_admin_help_keyboard,
)
from utils.messages import (
    format_request_list,
    get_welcome_message,
    get_help_message_for_user,
    get_help_photo_message,
    get_help_timing_message,
    get_help_not_fixed_message,
    get_admin_help_message,
    get_admin_export_help_message,
)


class CreateRequestStates(StatesGroup):
    waiting_for_description = State()  # –§–æ—Ç–æ/—Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
    waiting_for_additional = State()   # –•–æ—Ç–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å?
    waiting_for_priority = State()     # –í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞

@require_auth
async def main_menu_callback(callback: types.CallbackQuery, user, session):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    is_admin = user.role == "admin"
    keyboard = get_main_menu_keyboard(is_admin)
    await callback.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@require_auth
async def create_request_callback(callback: types.CallbackQuery, state: FSMContext, user, session):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - –Ω–∞—á–∞–ª–æ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    await state.set_state(CreateRequestStates.waiting_for_description)
    await callback.message.edit_text(
        "üì∏ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç</b>\n\n"
        "<b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:</b>\n"
        "‚Ä¢ üì∑ <b>–§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:</b> —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ üí¨ <b>–¢–µ–∫—Å—Ç:</b> –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å–ª–æ–≤–∞–º–∏\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚úÖ <i>–§–æ—Ç–æ + '–¢–µ—á–µ—Ç –∫—Ä–∞–Ω –≤ –∫–∞–±–∏–Ω–µ—Ç–µ 101'</i>\n"
        "‚úÖ <i>'–°–ª–æ–º–∞–ª–∞—Å—å –ª–∞–º–ø–æ—á–∫–∞ –≤ –∫–æ—Ä–∏–¥–æ—Ä–µ 3 —ç—Ç–∞–∂–∞'</i>\n"
        "‚úÖ <i>'–ù–µ—Ç –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã –≤ –∫–ª–∞—Å—Å–µ –ê'</i>\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</i>",
        reply_markup=get_back_keyboard("back_to_main"),
        parse_mode="HTML"
    )
    await callback.answer()

@require_auth
async def my_requests_callback(callback: types.CallbackQuery, user, session):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stmt = select(Request).where(Request.user_id == user.id).order_by(Request.created_at.desc())
    result = await session.execute(stmt)
    requests = result.scalars().all()

    if not requests:
        text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É!"
        keyboard = get_main_menu_keyboard(user.role == "admin")
    else:
        text = format_request_list(requests, "–í–∞—à–∏ –∑–∞—è–≤–∫–∏")
        keyboard = get_back_keyboard("back_to_main")

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

async def back_to_main_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await main_menu_callback(callback)

@require_auth
async def help_user_callback(callback: types.CallbackQuery, user, session):
    """–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = get_user_help_keyboard()
    text = get_help_message_for_user()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def help_photo_callback(callback: types.CallbackQuery, user, session):
    """–°–ø—Ä–∞–≤–∫–∞: –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"""
    text = get_help_photo_message()
    keyboard = get_back_keyboard("help_user")
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def help_timing_callback(callback: types.CallbackQuery, user, session):
    """–°–ø—Ä–∞–≤–∫–∞: –∫–∞–∫ –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å"""
    text = get_help_timing_message()
    keyboard = get_back_keyboard("help_user")
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def help_not_fixed_callback(callback: types.CallbackQuery, user, session):
    """–°–ø—Ä–∞–≤–∫–∞: —á—Ç–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ"""
    text = get_help_not_fixed_message()
    keyboard = get_back_keyboard("help_user")
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def help_admin_callback(callback: types.CallbackQuery, user, session):
    """–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∑–∞–≤—Ö–æ–∑–∞"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    keyboard = get_admin_help_keyboard()
    text = get_admin_help_message()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def help_admin_panel_callback(callback: types.CallbackQuery, user, session):
    """–°–ø—Ä–∞–≤–∫–∞: –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    text = get_admin_help_message()
    keyboard = get_back_keyboard("help_menu")
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def help_export_callback(callback: types.CallbackQuery, user, session):
    """–°–ø—Ä–∞–≤–∫–∞: –∫–∞–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"""
    if user.role != "admin":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    text = get_admin_export_help_message()
    keyboard = get_back_keyboard("help_menu")
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@require_auth
async def help_menu_callback(callback: types.CallbackQuery, user, session):
    """–ú–µ–Ω—é —Å–ø—Ä–∞–≤–∫–∏"""
    if user.role == "admin":
        keyboard = get_admin_help_keyboard()
        text = (
            "üëë <b>–°–ü–†–ê–í–ö–ê –î–õ–Ø –ó–ê–í–•–û–ó–ê</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
        )
    else:
        keyboard = get_user_help_keyboard()
        text = (
            "‚ùì <b>–°–ü–†–ê–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å–ø—Ä–∞–≤–∫—É:"
        )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


def register_menu_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é"""
    dp.callback_query.register(main_menu_callback, F.data == "back_to_main")
    dp.callback_query.register(create_request_callback, F.data == "create_request")
    dp.callback_query.register(my_requests_callback, F.data == "my_requests")
    
    # –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.callback_query.register(help_user_callback, F.data == "help_user")
    dp.callback_query.register(help_photo_callback, F.data == "help_photo")
    dp.callback_query.register(help_timing_callback, F.data == "help_timing")
    dp.callback_query.register(help_not_fixed_callback, F.data == "help_not_fixed")
    
    # –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∑–∞–≤—Ö–æ–∑–∞
    dp.callback_query.register(help_menu_callback, F.data == "help_menu")
    dp.callback_query.register(help_admin_callback, F.data == "help_admin_panel")
    dp.callback_query.register(help_admin_panel_callback, F.data == "help_admin_panel")
    dp.callback_query.register(help_export_callback, F.data == "help_export")
