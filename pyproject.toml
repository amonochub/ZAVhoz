[project]
name = "zavhoz-bot"
version = "0.1.0"
description = "Telegram bot for managing repair requests in educational organizations"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = ["telegram", "bot", "aiogram", "repair-management"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Communications :: Chat",
]

dependencies = [
    "aiogram==3.22.0",
    "sqlalchemy==2.0.44",
    "psycopg2-binary==2.9.11",
    "python-dotenv==1.1.1",
    "asyncpg==0.30.0",
    "pydantic>=2.0",
    "greenlet>=3.0.0",
    "structlog>=24.1.0",
    "sentry-sdk>=1.40.0",
    "aiosqlite>=0.19.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0",
    "ruff>=0.8.0",
    "black>=24.0",
    "isort>=5.13",
    "mypy>=1.13",
    "bandit>=1.8.0",
    "safety>=3.0.0",
    "alembic>=1.13.0",
]

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["bot", "database", "handlers", "models", "utils", "tests"]

[tool.ruff]
line-length = 120
target-version = "py311"
extend-exclude = ["venv", "tests", "__pycache__"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "S",    # bandit (security)
    "UP",   # pyupgrade
    "ARG",  # unused arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected (ok in tests)
]

[tool.black]
line-length = 120
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | venv
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_mode = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
extend_skip_glob = ["venv/*"]

[tool.mypy]
python_version = "3.11"
strict = false
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_untyped_calls = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
pretty = true
show_error_context = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
allow_untyped_calls = true

[[tool.mypy.overrides]]
module = "sqlalchemy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aiogram.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
asyncio_mode = "auto"
addopts = "-v --cov=. --cov-report=html --cov-report=term-missing --cov-fail-under=40"

[tool.coverage.run]
source = ["."]
omit = [
    "venv/*",
    "tests/*",
    "*/__pycache__/*",
    "setup.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]
